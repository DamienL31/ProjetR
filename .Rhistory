View(tmp)
View(tmp)
spotify_data <- tidyr::unnest(spotify_data,id_artists)
View(spotify_data)
trimws(spotify_data$id_artists, " ")
trimws(spotify_data$id_artists, )
View(spotify_data)
trimws(spotify_data$id_artists,"")
trimws?
spotify_data$artist_name <- trimws(spotify_data$id_artists, which = "both")
View(spotify_data)
subset(spotify_data, subset = artist_count > 5)
subset(spotify_data, subset = artist_count >= 5)
new_data <- spotify_data %>%
group_by(artist_name)%>%
summarize(decompte = count(artist_name))
new_data <- spotify_data %>%
group_by(artist_name)%>%
summarize(decompte = count())
new_data <- spotify_data %>%
group_by(artist_name)%>%
summarise(decompte = count())
new_data <- spotify_data %>%
group_by(artist_name)%>%
summarize(decompte = count(row))
new_data <- spotify_data %>%
group_by(artist_name)%>%
summarize(decompte = count(n()))
new_data <- spotify_data %>%
group_by(artist_name)%>%
count(artist_name) %>%
filter( n >=5 ) %>%
subset(artist_name)
new_data <- spotify_data %>%
group_by(artist_name)%>%
count(artist_name) %>%
filter( n >=5 ) %>%
subset(n)
new_data <- spotify_data %>%
group_by(artist_name)%>%
count(artist_name) %>%
filter( n >=5 )
subset(new_data, subset = spotify_data$artist_name)
subset(new_data, subset = n > 5)
new_data <- spotify_data %>%
group_by(artist_name)%>%
count(artist_name) %>%
subset(n >= 5)
new_data <- spotify_data %>%
group_by(artist_name)%>%
count(artist_name) %>%
subset(n >= 5)
new_data <- spotify_data %>%
group_by(artist_name)%>%
count(artist_name) %>%
filter( n >= 5 ) %>%
ungroup(artist_name)
View(new_data)
new_data <- spotify_data %>%
group_by(artist_name)%>%
count(artist_name) %>%
filter( n >= 5 ) %>%
ungroup()
new_data <- spotify_data %>%
group_by(artist_name)%>%
filter( n >= 5 ) %>%
count(artist_name) %>%
ungroup()
new_data <- spotify_data %>%
group_by(artist_name)%>%
mutate(songs_artist = n())%>%
filter( n >= 5 ) %>%
ungroup()
new_data <- spotify_data %>%
group_by(id_artists)%>%
mutate(songs_artist = n())%>%
filter( n >= 5 ) %>%
ungroup()
new_data <- spotify_data %>%
group_by(id_artists) %>%
mutate(songs_artist = n()) %>%
filter( songs_artist >= 5 ) %>%
ungroup()
new_data <- spotify_data %>%
group_by(artist_name) %>%
mutate(songs_artist = n()) %>%
filter( songs_artist >= 5 ) %>%
ungroup()
get_genre_by_bpm <- function(bpm) {
genre <- case_when(
bpm == 80 ~ "Crunk",
bpm >= 60 & bpm <= 90 ~ "Dub",
bpm >= 80 & bpm <= 90 ~ "Reggae",
bpm >= 80 & bpm <= 100 ~ "Hip-hop",
bpm >= 80 & bpm <= 120 ~ "Rock Folk",
bpm >= 90 & bpm <= 120 ~ "Rock pop",
bpm >= 50 & bpm <= 56 ~ "Tango",
bpm >= 80 & bpm <= 100 ~ "Salsa",
bpm >= 60 & bpm <= 120 ~ "Trip hop",
bpm >= 70 & bpm <= 120 ~ "Soul Music",
bpm >= 100 & bpm <= 120 ~ "Chillstep",
bpm >= 120 & bpm <= 135 ~ "Minimal",
bpm >= 125 & bpm <= 135 ~ "Funky house",
bpm >= 126 & bpm <= 135 ~ "Electro",
bpm >= 125 & bpm <= 140 ~ "House music",
bpm >= 130 & bpm <= 140 ~ "Trance",
bpm >= 135 & bpm <= 145 ~ "Dubstep",
bpm >= 120 & bpm <= 150 ~ "Techno",
bpm >= 170 & bpm <= 180 ~ "Rock Punk",
bpm >= 150 & bpm <= 190 ~ "Drum’n’bass",
bpm >= 60 & bpm <= 220 ~ "Jazz",
bpm >= 80 & bpm <= 220 ~ "Rock",
bpm >= 160 & bpm <= 230 ~ "Hardcore",
bpm >= 200 & bpm <= 500 ~ "Speedcore",
bpm > 1000 ~ "Extratone",
TRUE ~ "Genre non défini"
)
return(genre)
}
test <- 100
get_genre_by_bpm(100)
spotify_data <- spotify_data %>%
mutate(genre_music = get_genre_by_bpm(bpm))
View(spotify_data)
View(new_data)
View(spotify_data)
?status
ui <- dashboardPage(skin = "black",
dbHeader,
dashboardSidebar(disable = TRUE),
dashboardBody(
box(
title = "Important Informations",
solidHeader = TRUE,
background = "darkgreen",
p("Texte"),
status = "green"
),
ui <- dashboardPage(skin = "black",
dbHeader,
dashboardSidebar(disable = TRUE),
dashboardBody(
box(
title = "Important Informations",
solidHeader = TRUE,
background = "darkgreen",
p("Texte"),
status = "green"
)),
ui <- dashboardPage(skin = "black",
dbHeader,
dashboardSidebar(disable = TRUE),
dashboardBody(
box(
title = "Important Informations",
solidHeader = TRUE,
background = "darkgreen",
p("Texte"),
status = "success"
)),
ui <- dashboardPage(skin = "black",
dbHeader,
dashboardSidebar(disable = TRUE),
dashboardBody(
box(
title = "Important Informations",
solidHeader = TRUE,
background = "darkgreen",
p("Texte"),
status = "success"
))),
ui <- dashboardPage(skin = "black",
dbHeader,
dashboardSidebar(disable = TRUE),
dashboardBody(
box(
title = "Important Informations",
solidHeader = TRUE,
background = "darkgreen",
status = "success",
p("texte")
),
ui <- dashboardPage(skin = "black",
dbHeader,
dashboardSidebar(disable = TRUE),
dashboardBody(
box(
title = "Important Informations",
solidHeader = TRUE,
background = "darkgreen",
status = "success",
p("texte")
)))
ui <- dashboardPage(skin = "black",
dbHeader,
dashboardSidebar(disable = TRUE),
dashboardBody(
box(
title = "Important Informations",
solidHeader = TRUE,
background = "darkgreen",
status = "success",
p("texte")
)))
library(tidyverse)
library(shiny)
library(shinydashboard)
library(shinyWidgets)
library(ggplot2)
library(DT)
library(stringr)
library(tidytext)
library(plotly)
#### Lecture des data
spotify_data <- read.csv("data/spotify-2023.csv",
stringsAsFactors = FALSE,
check.names = FALSE, quote = "\"",
header = TRUE,
encoding = "UTF-8")
#### A faire
# renommer la colonne artist(s)_name en artist_name
# convertir les valeurs de la colonne streams en nombres.
spotify_data <- spotify_data %>%
rename(artist_name = `artist(s)_name`)%>%
mutate(streams = as.numeric(as.character(streams)))
class(spotify_data$streams)
#### Traitement des artistes
# Nettoyage des guillemets : suppression des crochets de la colonne artist_name),
# probablement pour nettoyer les données.
gsub("caractere a enlever", "remplacement", "variable" )
# Séparation des artistes : Les noms des artistes sont séparés s'ils sont listés ensemble dans une même chaîne de caractères.
spotify_data$id_artists <- strsplit(spotify_data$artist_name, ",")
spotify_data <- tidyr::unnest(spotify_data,id_artists)
# Nettoyage supplémentaire et formatage : Suppression des espaces superflus dans les noms des artistes.
spotify_data$artist_name <- trimws(spotify_data$id_artists, which = "both")
# Filtrage des artistes :  ne garder que les artistes ayant plus de 5 chansons.
new_data <- spotify_data %>%
group_by(artist_name) %>%
mutate(songs_artist = n()) %>%
filter( songs_artist >= 5 ) %>%
ungroup()
#### Définition genre de musique
# https://www.kine-formations.com/wp-content/uploads/2020/04/Liste-des-BPM-par-style-musical-Annexe-t%C3%A9l%C3%A9chargeable-%C3%A0-la-fin.pdf
get_genre_by_bpm <- function(bpm) {
genre <- case_when(
bpm == 80 ~ "Crunk",
bpm >= 60 & bpm <= 90 ~ "Dub",
bpm >= 80 & bpm <= 90 ~ "Reggae",
bpm >= 80 & bpm <= 100 ~ "Hip-hop",
bpm >= 80 & bpm <= 120 ~ "Rock Folk",
bpm >= 90 & bpm <= 120 ~ "Rock pop",
bpm >= 50 & bpm <= 56 ~ "Tango",
bpm >= 80 & bpm <= 100 ~ "Salsa",
bpm >= 60 & bpm <= 120 ~ "Trip hop",
bpm >= 70 & bpm <= 120 ~ "Soul Music",
bpm >= 100 & bpm <= 120 ~ "Chillstep",
bpm >= 120 & bpm <= 135 ~ "Minimal",
bpm >= 125 & bpm <= 135 ~ "Funky house",
bpm >= 126 & bpm <= 135 ~ "Electro",
bpm >= 125 & bpm <= 140 ~ "House music",
bpm >= 130 & bpm <= 140 ~ "Trance",
bpm >= 135 & bpm <= 145 ~ "Dubstep",
bpm >= 120 & bpm <= 150 ~ "Techno",
bpm >= 170 & bpm <= 180 ~ "Rock Punk",
bpm >= 150 & bpm <= 190 ~ "Drum’n’bass",
bpm >= 60 & bpm <= 220 ~ "Jazz",
bpm >= 80 & bpm <= 220 ~ "Rock",
bpm >= 160 & bpm <= 230 ~ "Hardcore",
bpm >= 200 & bpm <= 500 ~ "Speedcore",
bpm > 1000 ~ "Extratone",
TRUE ~ "Genre non défini"
)
return(genre)
}
test <- 100
get_genre_by_bpm(100)
spotify_data <- spotify_data %>%
mutate(genre_music = get_genre_by_bpm(bpm))
#### Header application
dbHeader <- dashboardHeader()
dbHeader$children[[2]]$children <- tags$a(href='https://www.kaggle.com/datasets/nelgiriyewithana/top-spotify-songs-2023',
tags$img(src='my_Logo.jpg',height='40',
width='130'))
ui <- dashboardPage(skin = "black",
dbHeader,
dashboardSidebar(disable = TRUE),
dashboardBody(
box(
title = "Important Informations",
solidHeader = TRUE,
background = "darkgreen",
status = "success",
p("texte")
)))
ui <- dashboardPage(skin = "black",
dbHeader,
dashboardSidebar(disable = TRUE),
dashboardBody(
box(
title = "Important Informations",
solidHeader = TRUE,
background = "green",
status = "success",
p("texte")
)))
ui <- dashboardPage(skin = "black",
dbHeader,
dashboardSidebar(disable = TRUE),
dashboardBody(
box(
title = "Important Informations",
solidHeader = TRUE,
background = "green",
status = "success",
p("texte")
)))
runApp()
runApp()
library(viridis)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(spotify_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(spotify_data)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
View(spotify_data)
runApp()
spotify_data <- read.csv("data/spotify-2023.csv",
stringsAsFactors = FALSE,
check.names = FALSE, quote = "\"",
header = TRUE,
encoding = "UTF-8")
spotify_data <- spotify_data %>%
rename(artist_name = `artist(s)_name`)%>%
mutate(as.numeric(as.character(streams)))
spotify_data <- spotify_data %>%
rename(artist_name = `artist(s)_name`)%>%
mutate(streams = as.numeric(as.character(streams)))
View(spotify_data)
View(spotify_data)
class(spotify_data$streams)
spotify_data <- spotify_data %>%
mutate(as.character(as.numeric(streams)))
class(spotify_data$streams)
View(spotify_data)
spotify_data$id_artists <- strsplit(spotify_data$artist_name, ",")
spotify_data <- tidyr::unnest(spotify_data,id_artists)
spotify_data$artist_name <- trimws(spotify_data$id_artists, which = "both")
new_data <- spotify_data %>%
group_by(artist_name) %>%
mutate(songs_artist = n()) %>%
filter( songs_artist >= 5 ) %>%
ungroup()
get_genre_by_bpm <- function(bpm) {
genre <- case_when(
bpm == 80 ~ "Crunk",
bpm >= 60 & bpm <= 90 ~ "Dub",
bpm >= 80 & bpm <= 90 ~ "Reggae",
bpm >= 80 & bpm <= 100 ~ "Hip-hop",
bpm >= 80 & bpm <= 120 ~ "Rock Folk",
bpm >= 90 & bpm <= 120 ~ "Rock pop",
bpm >= 50 & bpm <= 56 ~ "Tango",
bpm >= 80 & bpm <= 100 ~ "Salsa",
bpm >= 60 & bpm <= 120 ~ "Trip hop",
bpm >= 70 & bpm <= 120 ~ "Soul Music",
bpm >= 100 & bpm <= 120 ~ "Chillstep",
bpm >= 120 & bpm <= 135 ~ "Minimal",
bpm >= 125 & bpm <= 135 ~ "Funky house",
bpm >= 126 & bpm <= 135 ~ "Electro",
bpm >= 125 & bpm <= 140 ~ "House music",
bpm >= 130 & bpm <= 140 ~ "Trance",
bpm >= 135 & bpm <= 145 ~ "Dubstep",
bpm >= 120 & bpm <= 150 ~ "Techno",
bpm >= 170 & bpm <= 180 ~ "Rock Punk",
bpm >= 150 & bpm <= 190 ~ "Drum’n’bass",
bpm >= 60 & bpm <= 220 ~ "Jazz",
bpm >= 80 & bpm <= 220 ~ "Rock",
bpm >= 160 & bpm <= 230 ~ "Hardcore",
bpm >= 200 & bpm <= 500 ~ "Speedcore",
bpm > 1000 ~ "Extratone",
TRUE ~ "Genre non défini"
)
return(genre)
}
spotify_data <- spotify_data %>%
mutate(genre_music = get_genre_by_bpm(bpm))
dbHeader <- dashboardHeader()
dbHeader$children[[2]]$children <- tags$a(href='https://www.kaggle.com/datasets/nelgiriyewithana/top-spotify-songs-2023',
tags$img(src='my_Logo.jpg',height='40',
width='130'))
spotify_data <- spotify_data %>%
mutate(streams = as.character(as.numeric(streams)))%>%
drop(`as.character(as.numeric(streams))`)%>%
drop(`as.numeric(as.character(streams))`)
spotify_data <- spotify_data %>%
mutate(streams = as.character(as.numeric(streams)))%>%
remove(`as.character(as.numeric(streams))`)%>%
remove(`as.numeric(as.character(streams))`)
spotify_data <- spotify_data %>%
mutate(streams = as.character(as.numeric(streams)))%>%
select(.`as.character(as.numeric(streams))`)%>%
spotify_data <- read.csv("data/spotify-2023.csv",
stringsAsFactors = FALSE,
check.names = FALSE, quote = "\"",
header = TRUE,
encoding = "UTF-8")
spotify_data <- spotify_data %>%
mutate(streams = as.character(as.numeric(streams)))%>%
class(spotify_data$streams)
spotify_data$id_artists <- strsplit(spotify_data$artist_name, ",")
spotify_data$id_artists <- strsplit(spotify_data$artist_name, ",")
spotify_data <- tidyr::unnest(spotify_data,id_artists)
spotify_data$id_artists <- lapply(strsplit(spotify_data$artist_name, ","))
get_genre_by_bpm <- function(bpm) {
genre <- case_when(
bpm == 80 ~ "Crunk",
bpm >= 60 & bpm <= 90 ~ "Dub",
bpm >= 80 & bpm <= 90 ~ "Reggae",
bpm >= 80 & bpm <= 100 ~ "Hip-hop",
bpm >= 80 & bpm <= 120 ~ "Rock Folk",
bpm >= 90 & bpm <= 120 ~ "Rock pop",
bpm >= 50 & bpm <= 56 ~ "Tango",
bpm >= 80 & bpm <= 100 ~ "Salsa",
bpm >= 60 & bpm <= 120 ~ "Trip hop",
bpm >= 70 & bpm <= 120 ~ "Soul Music",
bpm >= 100 & bpm <= 120 ~ "Chillstep",
bpm >= 120 & bpm <= 135 ~ "Minimal",
bpm >= 125 & bpm <= 135 ~ "Funky house",
bpm >= 126 & bpm <= 135 ~ "Electro",
bpm >= 125 & bpm <= 140 ~ "House music",
bpm >= 130 & bpm <= 140 ~ "Trance",
bpm >= 135 & bpm <= 145 ~ "Dubstep",
bpm >= 120 & bpm <= 150 ~ "Techno",
bpm >= 170 & bpm <= 180 ~ "Rock Punk",
bpm >= 150 & bpm <= 190 ~ "Drum’n’bass",
bpm >= 60 & bpm <= 220 ~ "Jazz",
bpm >= 80 & bpm <= 220 ~ "Rock",
bpm >= 160 & bpm <= 230 ~ "Hardcore",
bpm >= 200 & bpm <= 500 ~ "Speedcore",
bpm > 1000 ~ "Extratone",
TRUE ~ "Genre non défini"
)
return(genre)
}
spotify_data <- spotify_data %>%
mutate(genre_music = get_genre_by_bpm(bpm))
dbHeader <- dashboardHeader()
dbHeader$children[[2]]$children <- tags$a(href='https://www.kaggle.com/datasets/nelgiriyewithana/top-spotify-songs-2023',
tags$img(src='my_Logo.jpg',height='40',
width='130'))
runApp()
runApp()
runApp()
